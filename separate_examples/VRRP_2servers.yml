# Heat template to Create 2 instances with a additional port for VRRP in a existing internal network.
# Use as: openstack stack create -t VRRP_2instances.yml stackname
# 
# Author: Cees Moerkerken, http://virtu-on.nl/
# Copyright (C) 2017 Cees Moerkerken (CloudVPS Heat templates)
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY;

heat_template_version: '2015-04-30'

description: Create 2 instances with a additional port for VRRP in a existing internal network.

################
## Parameters ##
################

parameters:
  VRRP_servers_basename:
    type: string
    label: Instance base name
    description: Base name of VRRP instances
    default: "LB"

  key_name:
    type: string
    label: SSH Key
    description: Name or id of your ssh key
    default: 

  flavor: 
    type: string
    label: Instance Flavor
    description: Flavor of the VRRP instances
    default: "Standard 1GB"

  image:
    type: string
    label: Instance Image
    description: Image for the VRRP instance
    default: "Ubuntu 16.04 (LTS)"

  floating_net:
    type: string
    label: Public net 
    description: Name of public network for floating IP
    default: floating

  floating_ips:
    type: string
    label: registered floating IP's
    description: Registered floating IP's that will be used by VRRP
    default: " "

  private_net:
    type: string
    label: Private Network
    description: Name of private network
    default: net-private

  private_subnet: 
    type: string
    label: Private Subnet 
    description: Name of private network
    default: private-subnet

  sec_group:
    type: string
    label: Security Group
    description: Name or ID of the existing security group for the instances (VRRP is allowed in new group)
    default: default

  webserver1:
    type: string
    label: Internal websever IP
    description: IP for the internal servers
    default: "10.0.0.3"

  webserver2:
    type: string
    label: Internal websever IP
    description: IP for the internal servers
    default: "10.0.0.4"

resources:

#####################
## Security Groups ##
#####################

  sec_group_vrrp:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        list_join: ['-', [ {get_param: 'OS::stack_name'}, 'secgroup-ssh-vrrp-icmp']]
      rules:
#TCP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: ingress
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: ingress
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: ingress
          port_range_min: 8000
          port_range_max: 8000
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: egress
#UDP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          direction: egress
#VRRP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: 112
          direction: ingress
        - remote_ip_prefix: 0.0.0.0/0
          protocol: 112
          direction: egress
#ICMP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
          direction: ingress
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
          direction: egress


################
## Networking ##
################

# Create a extra port for the Virtual IP address
  vip01_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net }
      fixed_ips:
        - subnet_id: { get_param: private_subnet }


###############
## Instances ##
###############
  auth_pass:
      type: 'OS::Heat::RandomString'
      properties:
        length: 8

  instance01:
    type: OS::Nova::Server
    properties:
      name:
        list_join: ['-', [ {get_param: 'OS::stack_name'}, {get_param: VRRP_servers_basename}, '01']]
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks: [{ network: { get_param: private_net }}]
      security_groups: [{ get_resource: sec_group_vrrp }]
      metadata: {"ha_vip_address": { get_attr: [ vip01_port, fixed_ips, 0, ip_address ]},"ha_floatingips": { get_param: floating_ips },"ha_execution": "1"}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            apt-get update
            apt-get update
            apt install keepalived haproxy -y
            echo "
            vrrp_sync_group VG_1 {
                 group {
                    INTERN
                 }
            }
            
            vrrp_instance INTERN {
                interface eth0
                virtual_router_id 99
                state EQUAL
                advert_int 1
            
                authentication {
                    auth_type PASS
                    auth_pass $auth_pass
                }
            
                virtual_ipaddress {
                    $vip/32
                }
            }
            
            " > /etc/keepalived/keepalived.conf
            systemctl keepalived restart

            echo "frontend http-in
                  mode http
                  bind 0.0.0.0:80
                  default_backend appservers
            
            backend appservers
                  mode            http
                  balance         roundrobin
                  http-check      expect rstatus (2|3)[0-9][0-9]

            #Server list should be made dynamic, but this works for now.
                  server          app1 $webserver1:80 check
                  server          app2 $webserver2:80 check

            frontend Statistics
                  mode http
                  bind 0.0.0.0:8000
                  option contstats
                  default_backend HAProxy-Statistics
            
            backend HAProxy-Statistics
                  mode http
                  stats enable
                  stats uri /stats
                  stats refresh 10s
                  stats show-node
                  stats show-legends

            " >> /etc/haproxy/haproxy.cfg
            systemctl restart haproxy
            sleep 60; systemctl restart keepalived

          params:
            $vip: { get_attr: [ vip01_port, fixed_ips, 0, ip_address ]}
            $auth_pass: {get_attr: [auth_pass, value]}
            $webserver1: {get_param: webserver1}
            $webserver2: {get_param: webserver2}

  instance02:
    type: OS::Nova::Server
    properties:
      name:
        list_join: ['-', [ {get_param: 'OS::stack_name'}, {get_param: VRRP_servers_basename}, '02']]
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks: [{ network: { get_param: private_net }}]
      security_groups: [{ get_resource: sec_group_vrrp }]
      metadata: {"ha_vip_address": { get_attr: [ vip01_port, fixed_ips, 0, ip_address ]},"ha_floatingips": { get_param: floating_ips },"ha_execution": "1"}
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            apt-get update
            apt-get update
            apt install keepalived haproxy -y
            echo "
            vrrp_sync_group VG_1 {
                 group {
                    INTERN
                 }
            }
            
            vrrp_instance INTERN {
                interface eth0
                virtual_router_id 99
                state EQUAL
                advert_int 1
            
                authentication {
                    auth_type PASS
                    auth_pass $auth_pass
                }
            
                virtual_ipaddress {
                    $vip/32
                }
            }
            
            " > /etc/keepalived/keepalived.conf
            systemctl keepalived restart

            echo "frontend http-in
                  mode http
                  bind 0.0.0.0:80
                  default_backend appservers
            
            backend appservers
                  mode            http
                  balance         roundrobin
                  http-check      expect rstatus (2|3)[0-9][0-9]

            #Server list should be made dynamic, but this works for now.
                  server          app1 $webserver1:80 check
                  server          app2 $webserver2:80 check

            frontend Statistics
                  mode http
                  bind 0.0.0.0:8000
                  option contstats
                  default_backend HAProxy-Statistics
            
            backend HAProxy-Statistics
                  mode http
                  stats enable
                  stats uri /stats
                  stats refresh 10s
                  stats show-node
                  stats show-legends

            " >> /etc/haproxy/haproxy.cfg
            systemctl restart haproxy
            sleep 60; systemctl restart keepalived

          params:
            $vip: { get_attr: [ vip01_port, fixed_ips, 0, ip_address ]}
            $auth_pass: {get_attr: [auth_pass, value]}
            $webserver1: {get_param: webserver1}
            $webserver2: {get_param: webserver2}


#############
## Outputs ##
#############

outputs:
  VIP_Internal_ip:
    value: { get_attr: [ vip01_port, fixed_ips, 0, ip_address ]}
    description: Internal Virtual IP used in the keepalived config
#  VIP_Floating_ip:
#    value: { get_attr: [floating_ip01, floating_ip_address]}
#    description: The Floating IP attached to the internal ip port

