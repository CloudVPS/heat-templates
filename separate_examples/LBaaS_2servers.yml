## WIP: Needs to have ports attached to the LB for the security group to work
# 
# Heat template to Create a LBaaS Loadbalancer for existing servers in a internal network.
# Use as: openstack stack create -t LBaaS_2servers.yml <stackname>
# 
# Keep in mind that the loadbalancer will use the default security group!
# 
# Author: Cees Moerkerken, http://virtu-on.nl/
# Copyright (C) 2017 Cees Moerkerken (CloudVPS Heat templates)
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY;

heat_template_version: 2016-04-08

description: Create a LBaaS Loadbalancer for existing servers in a internal network.

################
## Parameters ##
################

parameters:
  internal_server_count:
    type: number
    label: Internal Sever Count
    description: Number of internal servers
    default: 2

  internal_server_ip1:
    type: string
    label: Internal Sever 1 IP
    description: IP for the internal server
    default: "10.0.0.5"

  internal_server_ip2:
    type: string
    label: Internal Sever 2 IP
    description: IP for the internal server
    default: "10.0.0.6"

  internal_port: 
    type: string
    label: Internal Sever IPs
    description: Port used by the internal servers
    default: 80

  lb_port: 
    type: string
    label: 
    description: Port used by the load balancer facing external
    default: 80

  protocol:
    type: string
    label: 
    description: Protocol to be loadbalanced (HTTP, HTTPS or TCP)
    default: HTTP

  public_net: 
    type: string
    label: 
    description: ID or name of public network for which floating IP addresses will be allocated
    default: floating

  private_net:
    type: string
    label: Network name
    description: Name of existing network to be used
    default: private-net

  private_subnet: 
    type: string
    label: Pivate subnet name
    description: Name of private network
    default: private-subnet

  security_group_name:
    default: default-allow-all
    description: Name of the security group for the loadbalancer
    type: string


resources:

############
## LBaaS ###
############

# Create a extra port for the Virtual IP address of the loadbalancer with the correct security group
# This port can't be attached to de loadbalancer, and is therefore still usesless
#  vip01_port:
#    type: OS::Neutron::Port
#    properties:
#      network_id: { get_param: private_net }
#      fixed_ips:
#        - subnet_id: { get_param: private_subnet }
#      security_groups:
#        - { get_param: security_group_name }

  loadbalancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
#      vip_address:  { get_attr: [ vip01_port, fixed_ips, 0, ip_address ]}
      vip_subnet: { get_param: private_subnet }

  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: { get_param: protocol }
      protocol_port: { get_param: lb_port }

  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: { get_param: protocol }
      listener: { get_resource: listener }

  pool_member1:
        type: OS::Neutron::LBaaS::PoolMember
        properties:
          pool: { get_resource: pool }
          address: { get_param: internal_server_ip1 }
          protocol_port: { get_param: internal_port }
          subnet: { get_param: private_subnet }

  pool_member2:
        type: OS::Neutron::LBaaS::PoolMember
        properties:
          pool: { get_resource: pool }
          address: { get_param: internal_server_ip2 }
          protocol_port: { get_param: internal_port }
          subnet: { get_param: private_subnet }

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      delay: 3
      type: { get_param: protocol }
      timeout: 3
      max_retries: 3
      pool: { get_resource: pool }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_attr: [loadbalancer, vip_port_id ]}


#############
## Outputs ##
#############

outputs:
  Loadbalancer_id:
    value: { get_attr: [ loadbalancer ] }
    description: GUID of the loadbalancer
  Pool_id:
    value: { get_attr: [ pool ] }
    description: GUID of the pool associated with this loadbalancer
#  VIP_Floating_ip:
#    value: { get_attr: [floating_ip01, floating_ip_address]}
#    description: The Floating IP attached to the internal ip port
  LB_Floating_ip:
    value: { get_attr: [ floating_ip, floating_ip_address ] }
    description: The floating ip

