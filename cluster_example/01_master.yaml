heat_template_version: 2015-10-15

description: A webcluster example in one template. (there is no replication configured, only failover)

parameters:

  project_id:
    type: string

  api_user:
    type: string

  api_user_pass:
    type: string

  key_name:
    type: string
    description: Name of keypair to assign to servers

  image:
    type: string
    default: "Ubuntu 16.04 (LTS)"
    description: Image used for all servers

  lbflavor:
    type: string
    default: "Standard 1GB"
    description: Flavor used for lb servers
  lb_count:
    type: string
    default: 2
    description: lbserver is not needed if you use lbaas
  lb_port_http:
    type: string
    default: 80
    description: Port used by the load balancer facing external
  lb_floatingip:
    type: string
    default: 
    description: VIP used by the load balancer facing external and failing over via keepalived script

  appflavor:
    type: string
    default: "Standard 1GB"
    description: Flavor used for app servers
  app_count:
    type: string
    default: 2
  app_port_http:
    type: string
    default: 80
    description: Port used by the appservers (webservers) internal

  dbflavor:
    type: string
    default: "Standard 1GB"
    description: Flavor used for lb servers
  db_count:
    type: string
    default: 2
  db_vip:
    type: string
    default: "10.0.0.254"
    description: IP used by keepalived on dbservers and wordpress as MySQL VIP (must match userdata)

  deployflavor:
    type: string
    default: "Standard 1GB"
    description: Flavor used for deploy/bastion server

  master_availability_zones:
    type: comma_delimited_list
    default: ["AMS-EQ1","AMS-EQ3","AMS-EQ1","AMS-EQ3","AMS-EQ1","AMS-EQ3","AMS-EQ1","AMS-EQ3","AMS-EQ1","AMS-EQ3","AMS-EQ1","AMS-EQ3",]

  sec_group_router:
    type: comma_delimited_list
    default: ["allow-all","allow-icmp"]

  public_net:
    type: string
    default: floating
    description: ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    default: net-private-01
    description: Name of private network to be created
  private_net_cidr:
    type: string
    default: 10.0.0.0/24
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    default: 10.0.0.1
    description: Private network gateway address
  private_net_pool_start:
    type: string
    default: 10.0.0.10
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    default: 10.0.0.250
    description: End of private network IP address allocation pool



resources:

################
## Networking ##
################

  sec_group_external:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        list_join: ['-', [ {get_param: 'OS::stack_name'}, 'secgroup-external']]
      rules:
#TCP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: egress
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: ingress
          port_range_min: { get_param: app_port_http }
          port_range_max: { get_param: app_port_http }
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: ingress
          port_range_min: 443
          port_range_max: 443
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: ingress
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: egress
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          direction: ingress
          port_range_min: 8000
          port_range_max: 8000

#UDP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          direction: ingress
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          direction: egress
#ICMP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
          direction: ingress
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
          direction: egress

  sec_group_internal:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        list_join: ['-', [ {get_param: 'OS::stack_name'}, 'secgroup-internal-allow-all']]
      rules:
#        - remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
        - remote_ip_prefix: 0.0.0.0/0
          direction: egress
#        - remote_ip_prefix: ::/0
        - ethertype: IPv6
          direction: ingress
        - remote_ip_prefix: ::/0
          direction: egress
          ethertype: IPv6

  private_net:
    type: OS::Neutron::Net
    properties:
      name: 
        list_join: ['-', [ {get_param: 'OS::stack_name'}, {get_param: private_net_name }]]

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      dns_nameservers: [{ get_param: private_net_gateway }]
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      admin_state_up: true
#      ha: true #All routers are deployed HA with OpenContrail by default
#      distributed: true #All routers are distributed with OpenContrail by default
      external_gateway_info:
        network: { get_param: public_net }

  router_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_net }
      fixed_ips:  [{"subnet": { get_resource: private_subnet }, "ip_address": { get_param: private_net_gateway }}]
      security_groups: { get_param: sec_group_router }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
#      subnet_id: { get_resource: private_subnet }
      port_id: { get_resource: router_port }



############
## LBaaS ###
############
#not needed if you use lbserver instances

  loadbalancer:
    type: My::Cluster::Loadbalancer
    properties:
      app_port_http: { get_param: app_port_http }
      lb_port_http: { get_param: lb_port_http }
      public_net: { get_param: public_net }
      private_net_cidr: { get_param: private_net_cidr }
      subnet_id: { get_resource: private_subnet }

################
## Instances ###
################
#lbserver not needed if you use lbaas

  lbservers:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: lb_count }
      resource_def:
          type: My::Cluster::InstanceInternal
          properties:
            name:
              list_join: ['-', [ {get_param: 'OS::stack_name'}, 'lb%index%']]
            key_name: { get_param: key_name }
            image: { get_param: image }
            flavor: { get_param: lbflavor }
            private_net: { get_resource: private_net }
            sec_group: { get_resource: sec_group_external }
            private_subnet: { get_resource: private_subnet }
            availability_zones: { get_param: master_availability_zones }
            index: '%index%'
            user_data:
              str_replace:
                template: |
                  #! /bin/sh -v
                  #The OpenStack URL's don't resolve correct from openstack itself.
                  echo "193.138.207.10	identity.openstack.cloudvps.com" >> /etc/hosts
                  echo "193.138.207.10  network.openstack.cloudvps.com" >> /etc/hosts

                  apt-get update
                  apt install keepalived haproxy rsyslog tcpdump python python-requests dmidecode software-properties-common -y
                  add-apt-repository ppa:certbot/certbot -y
                  apt-get update
                  apt install certbot -y
                  
                  mkdir -p /etc/cloudvps/
                  wget -O /etc/cloudvps/ha-ip-failover.py https://raw.githubusercontent.com/RaymiiOrg/openstack-ha-floating-ip-failover/master/ha-ip-failover.py
                  chmod +x /etc/cloudvps/ha-ip-failover.py
                  
                  ip=$(ip a|grep -m 1 "scope global"|cut -d " " -f6|cut -d "/" -f1)

                  echo '{
                    "username": "$APIUSER",
                    "password": "$APIUSERPASS",
                    "tenant_id": "$PROJECTID",
                    "floatingips": {
                      "$FLOATINGIP": "'$ip'"
                    } 
                  }' > /etc/cloudvps/ha-ip-config.json
                  
                  echo "global_defs {
                     router_id lb1
                  }
                  vrrp_sync_group VG_1 {
                       group {
                          INTERN
                       }
                  }
                  
                  vrrp_instance VI_1 {
                      state MASTER
                      interface eth0
                      virtual_router_id 51
                      priority 150
                      advert_int 1
                      authentication {
                          auth_type PASS
                          auth_pass 
                      }
                      notify /etc/cloudvps/ha-ip-failover.py
                  }
                  
                  " >> /etc/keepalived/keepalived.conf
                  systemctl restart keepalived

                  sleep 5
                  mkdir /etc/ssl/private/ -p
                  certbot certonly --standalone --preferred-challenges http --http-01-port 80 -d kinderboekenwebshop.demo.cloudvps.com -m cees@cloudvps.com  --agree-tos -n
                  cat /etc/letsencrypt/live/kinderboekenwebshop.demo.cloudvps.com/privkey.pem >> /etc/letsencrypt/live/kinderboekenwebshop.demo.cloudvps.com.pem
                  cat /etc/letsencrypt/live/kinderboekenwebshop.demo.cloudvps.com/cert.pem >> /etc/letsencrypt/live/kinderboekenwebshop.demo.cloudvps.com.pem
                  cat /etc/letsencrypt/live/kinderboekenwebshop.demo.cloudvps.com/chain.pem >> /etc/letsencrypt/live/kinderboekenwebshop.demo.cloudvps.com.pem
                  echo "frontend http-in
                      mode http
                      bind 0.0.0.0:80
                      bind 0.0.0.0:443 ssl crt /etc/letsencrypt/live/kinderboekenwebshop.demo.cloudvps.com.pem no-sslv3 crt-ignore-err all strict-sni

                      default_backend appservers
                  
                  backend appservers
                        mode            http
                        fullconn        40000
                        balance         roundrobin
                        cookie          SERVERID insert nocache indirect
                        option          httpchk HEAD /status.php
                        http-check      expect rstatus (2|3)[0-9][0-9]
                  #Server list should be made dynamic, but this works for now.
                        server          app11 10.0.0.11:80 check 
                        server          app12 10.0.0.12:80 check
                        server          app13 10.0.0.13:80 check
                        server          app14 10.0.0.14:80 check
                        server          app15 10.0.0.15:80 check
                        server          app16 10.0.0.16:80 check
                        server          app17 10.0.0.17:80 check
                        server          app18 10.0.0.18:80 check
                        server          app19 10.0.0.19:80 check
                        server          app20 10.0.0.20:80 check
                        server          app21 10.0.0.21:80 check
                        server          app22 10.0.0.22:80 check
                        server          app23 10.0.0.23:80 check
                        server          app24 10.0.0.24:80 check
                        server          app25 10.0.0.25:80 check
                        server          app26 10.0.0.26:80 check
                        server          app27 10.0.0.27:80 check
                        server          app28 10.0.0.28:80 check
                        server          app29 10.0.0.29:80 check
                  
                  frontend Statistics
                        mode http
                        bind 0.0.0.0:8000
                        option contstats
                        default_backend HAProxy-Statistics
                  
                  userlist UsersFor_HAProxyStatistics
                        group admin users admin
                        user admin insecure-password changeme
                  
                  backend HAProxy-Statistics
                        mode http
                        stats enable
                        stats uri /stats
                        stats refresh 10s
                        stats show-node
                        stats show-legends
                        acl AuthOkay_ReadOnly http_auth(UsersFor_HAProxyStatistics)
                        acl AuthOkay_Admin http_auth_group(UsersFor_HAProxyStatistics) admin
                        stats http-request auth realm HAProxy-Statistics unless AuthOkay_ReadOnly
                        stats admin if AuthOkay_Admin

                  " >> /etc/haproxy/haproxy.cfg
                  

                params:
                  $FLOATINGIP: {get_param: 'lb_floatingip'}
                  $PROJECTID: {get_param: 'project_id'}
                  $APIUSER: {get_param: 'api_user'}
                  $APIUSERPASS: {get_param: 'api_user_pass'}


  dbserver_vip_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - ip_address: { get_param: db_vip }

  dbservers:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: db_count }
      resource_def:
          type: My::Cluster::InstanceInternalVolVip
          properties:
            name:
              list_join: ['-', [ {get_param: 'OS::stack_name'}, 'db%index%']]
            key_name: { get_param: key_name }
            image: { get_param: image }
            flavor: { get_param: dbflavor }
            private_net: { get_resource: private_net }
            sec_group: { get_resource: sec_group_internal }
            user_data: { get_file: 'user_data_dbserver.sh' }
            private_subnet: { get_resource: private_subnet }
            availability_zones: { get_param: master_availability_zones }
            index: '%index%'
            allowed_address_pair: { get_param: db_vip }
 

  appservers:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: app_count }
      resource_def:
          type: My::Cluster::InstancePool
          properties:
            name: 
              list_join: ['-', [ {get_param: 'OS::stack_name'}, 'app%index%']]
            key_name: { get_param: key_name }
            image: { get_param: image }
            flavor: { get_param: appflavor }
            private_net: { get_resource: private_net }
            sec_group: { get_resource: sec_group_internal }
            app_port: { get_param: app_port_http }
            pool: { get_attr: [ loadbalancer, pool_id]}
            private_subnet: { get_resource: private_subnet }
            availability_zones: { get_param: master_availability_zones }
            index: '%index%'
            user_data:
              str_replace:
                template: |
                  #! /bin/sh -v
                  apt-get update
                  sudo apt install -y nginx php php-mysql php-curl php-gd php-mcrypt mysql-client
                  
                  sudo mkdir -p $WP_PATH/public $WP_PATH/logs
                  sudo rm /etc/nginx/sites-enabled/default
                  sudo tee /etc/nginx/sites-available/$WP_DOMAIN <<EOF
                  server {
                    listen 80;
                    server_name $WP_DOMAIN www.$WP_DOMAIN _;
                  
                    root $WP_PATH/public;
                    index index.php;
                  
                    access_log $WP_PATH/logs/access.log;
                    error_log $WP_PATH/logs/error.log;
                  
                    location / {
                      try_files \$uri \$uri/ /index.php?\$args;
                    }
                  
                    location ~ \.php\$ {
                      include snippets/fastcgi-php.conf;
                      fastcgi_pass unix:/run/php/php7.0-fpm.sock;
                    }
                  }
                  EOF
                  sudo ln -s /etc/nginx/sites-available/$WP_DOMAIN /etc/nginx/sites-enabled/$WP_DOMAIN
                  #sudo rm /etc/nginx/sites-enabled/default
                  sudo systemctl restart nginx
                  
                  
                  ### START The WP installation ###
                  
                  sudo rm -rf $WP_PATH/public/ # !!!
                  sudo mkdir -p $WP_PATH/public/
                  sudo chown -R $USER $WP_PATH/public/
                  cd $WP_PATH/public/
                  
                  wget https://wordpress.org/latest.tar.gz
                  tar xf latest.tar.gz --strip-components=1
                  tar --strip-components=1 -zxvf latest.tar.gz -C $WP_PATH/public
                  rm latest.tar.gz
                  
                  mv wp-config-sample.php wp-config.php
                  sed -i s/database_name_here/$WP_DB_NAME/ wp-config.php
                  sed -i s/username_here/$WP_DB_USERNAME/ wp-config.php
                  sed -i s/password_here/$WP_DB_PASSWORD/ wp-config.php
                  sed -i s/localhost/$WP_DB_HOST/ wp-config.php
                  echo "define('FS_METHOD', 'direct');" >> wp-config.php
                  
                  sudo chown -R www-data:www-data $WP_PATH/public/
                  
                  echo "waiting for databases"
                  until mysql -u $WP_DB_USERNAME -p$WP_DB_PASSWORD -h $WP_DB_HOST -e "show databases"; do sleep 2; done
                  echo "database found"
                  
                  
                  curl -H 'Host: $WP_DOMAIN' "http://127.0.0.1/wp-admin/install.php?step=2" \
                    --data-urlencode "weblog_title=$WP_DOMAIN"\
                    --data-urlencode "user_name=$WP_ADMIN_USERNAME" \
                    --data-urlencode "admin_email=$WP_ADMIN_EMAIL" \
                    --data-urlencode "admin_password=$WP_ADMIN_PASSWORD" \
                    --data-urlencode "admin_password2=$WP_ADMIN_PASSWORD" \
                    --data-urlencode "pw_weak=1"
                  hostname > /var/www/wordpress/public/status.php 
                  chown www-data:www-data /var/www/wordpress/public/status.php
                params:
                  $WP_DOMAIN: "kinderboekenwebshop.nl"
                  $WP_ADMIN_USERNAME: "admin"
                  $WP_ADMIN_PASSWORD: "admin"
                  $WP_ADMIN_EMAIL: "no@spam.org"
                  $WP_DB_NAME: "wordpress"
                  $WP_DB_USERNAME: "wordpress"
                  $WP_DB_PASSWORD: "wordpress"
                  $WP_DB_HOST: { get_param: db_vip }
                  $WP_PATH: "/var/www/wordpress"
                  $MYSQL_ROOT_PASSWORD: "root"
 



  deployserver:
    type: My::Cluster::InstanceFloat
    properties:
      name:
        list_join: ['-', [ {get_param: 'OS::stack_name'}, 'deployserver']]
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: deployflavor }
      private_net: { get_resource: private_net }
      private_subnet: { get_resource: private_subnet }
      sec_group: { get_resource: sec_group_external }
      public_net: { get_param: public_net }
      user_data: { get_file: 'user_data_deploy.sh' }
      availability_zones: { get_param: master_availability_zones }
      index: 0


#############
## Outputs ##
#############

outputs:

  LBaaS_Floating_ip:
    value: { get_attr: [ loadbalancer, floating_ip ] }
    description: The floating ip of the LBaaS loadbalaner
  LB_Floating_ip:
    value: { get_param: 'lb_floatingip' }
    description: The floating ip of the loadbalaner servers configured in keepalived
  Deployserver_Float_ip:
    value: { get_attr: [ deployserver, floating_ip ] }
    description: The floating ip of the deployserver
  LBservers_ip:
    description: "internal ip addresses of lb servers"
    value: { get_attr: [ lbservers, instance_ip]}
  Appservers_ip:
    description: "ip addresses of appservers"
    value: { get_attr: [ appservers, instance_ip]}
  DBservers_ip:
    description: "ip addresses of dbservers"
    value: { get_attr: [ dbservers, instance_ip]}

