heat_template_version: 2015-04-30

parameters:
  m_ipam_name:
    type: string
    default: m_ipam
    description: Name of Mgmt IPAM to be created
  m_vn_name:
    type: string
    default: m_vn
    description: Name of Mgmt VN to be created
  m_subnet_ip_prefix:
    type: string
    default: 10.0.0
    description: subnet prefix for the Mgmt VN
  m_subnet_ip_prefix_len:
    type: string
    default: 24
    description: subnet prefix len for the Mgmt VN

  l_ipam_name:
    type: string
    default: l_ipam
    description: Name of Left IPAM to be created
  l_vn_name:
    type: string
    default: l_vn
    description: Name of Left VN to be created
  l_subnet_ip_prefix:
    type: string
    default: 11.0.0
    description: subnet prefix for the Left VN
  l_subnet_ip_prefix_len:
    type: string
    default: 24
    description: subnet prefix len for the Left VN

  r_ipam_name:
    type: string
    default: r_ipam
    description: Name of Right IPAM to be created
  r_vn_name:
    type: string
    default: r_vn
    description: Name of Right VN to be created
  r_subnet_ip_prefix:
    type: string
    default: 12.0.0
    description: subnet prefix for the Right VN
  r_subnet_ip_prefix_len:
    type: string
    default: 24
    description: subnet prefix len for the Right VN
  
  subnets_addr_from_start_true:
    type: boolean
    default: True
    description: Address allocation from start of the pool
  instance_ip_mode1:
    type: string
    default: 1
    description: Instance IP Mode
  vsrx_image:
    type: string
    default: "Ubuntu 16.04 (LTS)"
    description: Name of the image
  vsrx_flavor:
    type: string
    default: 1001
    description: Flavor
  test_vm_image:
    type: string
    default: "Ubuntu 16.04 (LTS)"
    description: Name of the test VM image
  test_vm_flavor:
    type: string
    default: 1001
    description: Flavor of the test VM
  vm1_name:
    type: string
    default: vm1
    description: Name of the VM1
  vm2_name:
    type: string
    default: vm2
    description: Name of the VM2
  test_vm_name:
    type: string
    default: test_vm
    description: Name of the test_VM

  m_vn_fqn:
    type: string
    default: default-domain:BXL000009 compute-Cees:m_vn
    description: FQN of the Mgmt VN
  l_vn_fqn:
    type: string
    default: default-domain:BXL000009 compute-Cees:l_vn
    description: FQN of the Left VN
  r_vn_fqn:
    type: string
    default: default-domain:BXL000009 compute-Cees:r_vn
    description: FQN of the Right VN

  aap_ip:
    type: string
    default: 10.0.0.1
    description: IP of the Allowed Address Pair
  aap_ip_len:
    type: string
    default: 24
    description: Length of the IP Prefix of the Allowed Address Pair
  aap_mac:
    type: string
#    default: "aa:bb:cc:dd:ee:ff"
    default: ""
    description: MAC of the Allowed Address Pair
  aap_mode:
    type: string
    default: active-active
    description: Allowed Address Pair Mode

resources:
  m_ipam:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: m_ipam_name }

  m_vn:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ m_ipam ]
    properties:
      name: { get_param: m_vn_name }
      network_ipam_refs: [{ get_resource: m_ipam }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: m_subnet_ip_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: m_subnet_ip_prefix_len },
                },
	      network_ipam_refs_data_ipam_subnets_addr_from_start: { get_param: subnets_addr_from_start_true },
            }]
         }]
  l_ipam:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: l_ipam_name }

  l_vn:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ l_ipam ]
    properties:
      name: { get_param: l_vn_name }
      network_ipam_refs: [{ get_resource: l_ipam }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: l_subnet_ip_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: l_subnet_ip_prefix_len },
                },
	      network_ipam_refs_data_ipam_subnets_addr_from_start: { get_param: subnets_addr_from_start_true },
           }]
        }]
  r_ipam:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: r_ipam_name }

  r_vn:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ r_ipam ]
    properties:
      name: { get_param: r_vn_name }
      network_ipam_refs: [{ get_resource: r_ipam }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: r_subnet_ip_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: r_subnet_ip_prefix_len },
                },
	      network_ipam_refs_data_ipam_subnets_addr_from_start: { get_param: subnets_addr_from_start_true },
           }]
         }]
  m_iip1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ m_vmi1 ]
    properties:
      instance_ip_mode: { get_param: instance_ip_mode1 }
      virtual_machine_interface_refs: [{ get_resource: m_vmi1 }]
      virtual_network_refs: [{ get_param: m_vn_fqn }]
  l_iip1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ l_vmi1 ]
    properties:
      instance_ip_mode: { get_param: instance_ip_mode1 }
      virtual_machine_interface_refs: [{ get_resource: l_vmi1 }]
      virtual_network_refs: [{ get_param: l_vn_fqn }]
  r_iip1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ r_vmi1 ]
    properties:
      instance_ip_mode: { get_param: instance_ip_mode1 }
      virtual_machine_interface_refs: [{ get_resource: r_vmi1 }]
      virtual_network_refs: [{ get_param: r_vn_fqn }]

  m_vmi1:
    depends_on: [ m_vn ]
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_network_refs: [{ get_param: m_vn_fqn }]
  l_vmi1:
    depends_on: [ l_vn ]
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_machine_interface_allowed_address_pairs: {
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair: [{
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_ip: {
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_ip_ip_prefix: { get_param: aap_ip },
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_ip_ip_prefix_len: { get_param: aap_ip_len },
	},
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_mac: { get_param: aap_mac },
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_address_mode: { get_param: aap_mode },
	}],
	}
      virtual_network_refs: [{ get_param: l_vn_fqn }]
  r_vmi1:
    depends_on: [ r_vn ]
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_network_refs: [{ get_param: r_vn_fqn }]

  VM1:
    type: OS::Nova::Server
    depends_on: [ m_iip1, l_iip1, r_iip1 ]
    properties:
      name: {get_param: vm1_name }
      image: { get_param:  vsrx_image }
      flavor: { get_param: vsrx_flavor }
      networks:
        - port: { get_resource: m_vmi1 }
        - port: { get_resource: l_vmi1 }
        - port: { get_resource: r_vmi1 }

  m_iip2:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ m_vmi2 ]
    properties:
      instance_ip_mode: { get_param: instance_ip_mode1 }
      virtual_machine_interface_refs: [{ get_resource: m_vmi2 }]
      virtual_network_refs: [{ get_param: m_vn_fqn }]
  l_iip2:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ l_vmi2 ]
    properties:
      instance_ip_mode: { get_param: instance_ip_mode1 }
      virtual_machine_interface_refs: [{ get_resource: l_vmi2 }]
      virtual_network_refs: [{ get_param: l_vn_fqn }]
  r_iip2:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ r_vmi2 ]
    properties:
      instance_ip_mode: { get_param: instance_ip_mode1 }
      virtual_machine_interface_refs: [{ get_resource: r_vmi2 }]
      virtual_network_refs: [{ get_param: r_vn_fqn }]

  m_vmi2:
    depends_on: [ m_vn ]
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_network_refs: [{ get_param: m_vn_fqn }]
  l_vmi2:
    depends_on: [ l_vn ]
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_machine_interface_allowed_address_pairs: {
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair: [{
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_ip: {
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_ip_ip_prefix: { get_param: aap_ip },
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_ip_ip_prefix_len: { get_param: aap_ip_len },
	},
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_mac: { get_param: aap_mac },
	virtual_machine_interface_allowed_address_pairs_allowed_address_pair_address_mode: { get_param: aap_mode },
	}]
							}

      virtual_network_refs: [{ get_param: l_vn_fqn }]
  r_vmi2:
    depends_on: [ r_vn ]
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_network_refs: [{ get_param: r_vn_fqn }]

  VM2:
    type: OS::Nova::Server
    depends_on: [ m_iip2, l_iip2, r_iip2 ]
    properties:
      name: {get_param: vm2_name }
      image: { get_param:  vsrx_image }
      flavor: { get_param: vsrx_flavor }
      networks:
        - port: { get_resource: m_vmi2 }
        - port: { get_resource: l_vmi2 }
        - port: { get_resource: r_vmi2 }

  test_vmi:
    depends_on: [ l_vn ]
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_network_refs: [{ get_param: l_vn_fqn }]

  test_iip:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ test_vmi ]
    properties:
      instance_ip_mode: { get_param: instance_ip_mode1 }
      virtual_machine_interface_refs: [{ get_resource: test_vmi }]
      virtual_network_refs: [{ get_param: l_vn_fqn }]

  test_VM:
    type: OS::Nova::Server
    depends_on: [ test_iip ]
    properties:
      name: {get_param: test_vm_name }
      image: { get_param:  test_vm_image }
      flavor: { get_param: test_vm_flavor }
      networks:
        - port: { get_resource: test_vmi }

outputs:
  vmi_mac:
    description: VMI Mac addresses  
    value: { get_attr: [ test_vmi, virtual_machine_interface_mac_addresses ] }

