heat_template_version: 2015-10-15

#description: A webcluster in one template.
parameters:

  app_port_http:
    type: string
#  app_port_https:
#    type: string
  lb_port_http:
    type: string
#  lb_port_https:
#    type: string
  public_net:
    type: string
  private_net_cidr:
    type: string
  subnet_id:
    type: string
    

resources:

############
## LBaaS ###
############

  loadbalancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_param: subnet_id }

## HTTP ##
  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: HTTP
      protocol_port: { get_param: lb_port_http }

  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: listener }
#      session_persistence: { type: APP_COOKIE, cookie_name: SERVERID }

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      admin_state_up: True
      delay: 3
      type: HTTP #'PING', 'TCP', 'HTTP', 'HTTPS'
      http_method: HEAD  #'GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'TRACE', 'OPTIONS', 'CONNECT', 'PATCH'
      url_path: '/'
      expected_codes: 200, 201, 202, 206
      timeout: 3
      max_retries: 3
      pool: { get_resource: pool }

## HTTPs ##
#  listener_tcp:
#    type: OS::Neutron::LBaaS::Listener
#    properties:
#      loadbalancer: { get_resource: loadbalancer }
#      protocol: TCP
#      protocol_port: { get_param: lb_port_https }
#
#  pool_https:
#    type: OS::Neutron::LBaaS::Pool
#    properties:
#      lb_algorithm: LEAST_CONNECTIONS
#      protocol: TCP
#      listener: { get_resource: listener_tcp }
#
#  monitor_https:
#    type: OS::Neutron::LBaaS::HealthMonitor
#    properties:
#      delay: 3
#      type: HTTPS
#      timeout: 3
#      max_retries: 3
#      pool: { get_resource: pool_https }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_attr: [loadbalancer, vip_port_id ]}

outputs:
  loadbalancer_id:
    value: { get_resource: load-balancer }
    description: "id the loadbalancer"
  pool_id:
    value: { get_resource: pool }
    description: "id the pool associated with this loadbalancer"
  floating_ip_id:
    value: { get_resource: floating_ip }
    description: "id of the floating ip"
  floating_ip:
    value: { get_attr: [ floating_ip, floating_ip_address ] }
    description: The floating ip

